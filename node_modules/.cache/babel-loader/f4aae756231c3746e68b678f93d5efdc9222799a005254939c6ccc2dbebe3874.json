{"ast":null,"code":"var _jsxFileName = \"/home/izaaq/lessons/phase-2-bot-battlr/Challenge-2-Bot-Battlr/code-challenge/src/components/BotCollection.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport BotCard from \"./BotCard\";\nimport BotSpecs from \"./BotSpecs\";\n// import React, { useState, lazy, Suspense } from \"react\";\n// const BotCard=  React.lazy(() => import (\"./BotCard\")); This is how to implement lazy\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction BotCollection({\n  bots,\n  onEnlist,\n  dischargeBot\n}) {\n  _s();\n  const [selectedBot, setSelectedBot] = useState(null);\n\n  //function to display botspecs when the bot is clicked\n  const handleBotClick = bot => {\n    setSelectedBot(bot);\n  };\n  if (selectedBot) {\n    return /*#__PURE__*/_jsxDEV(BotSpecs, {\n      bot: selectedBot,\n      enlistBot: onEnlist,\n      navigateBack: handleGoBack\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this);\n  }\n  function handleGoBack() {\n    setSelectedBot(null);\n  }\n  const botCards = bots.map(bot => /*#__PURE__*/_jsxDEV(BotCard, {\n    className: \"bot-card\",\n    bot: bot,\n    botFunction: handleBotClick,\n    dischargeBot: dischargeBot\n  }, bot.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: \"Collection of all bots\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ui four column grid\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: botCards\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(BotCollection, \"3l4Waxj/7PpzALMxEVPDr3iuT+c=\");\n_c = BotCollection;\nexport default BotCollection;\nvar _c;\n$RefreshReg$(_c, \"BotCollection\");","map":{"version":3,"names":["React","useState","BotCard","BotSpecs","jsxDEV","_jsxDEV","Fragment","_Fragment","BotCollection","bots","onEnlist","dischargeBot","_s","selectedBot","setSelectedBot","handleBotClick","bot","enlistBot","navigateBack","handleGoBack","fileName","_jsxFileName","lineNumber","columnNumber","botCards","map","className","botFunction","id","children","style","textAlign","_c","$RefreshReg$"],"sources":["/home/izaaq/lessons/phase-2-bot-battlr/Challenge-2-Bot-Battlr/code-challenge/src/components/BotCollection.js"],"sourcesContent":["\nimport React, { useState } from \"react\";\nimport BotCard from \"./BotCard\";\nimport BotSpecs from \"./BotSpecs\";\n// import React, { useState, lazy, Suspense } from \"react\";\n// const BotCard=  React.lazy(() => import (\"./BotCard\")); This is how to implement lazy\n\nfunction BotCollection({ bots, onEnlist, dischargeBot }) {\n  const [selectedBot, setSelectedBot] = useState(null);\n\n  //function to display botspecs when the bot is clicked\n  const handleBotClick = (bot) => {\n    setSelectedBot(bot);\n  };\n\n  if (selectedBot) {\n    return (\n      <BotSpecs\n        bot={selectedBot}\n        enlistBot={onEnlist}\n        navigateBack={handleGoBack}\n      />\n    );\n  }\n\n  function handleGoBack() {\n    setSelectedBot(null);\n  }\n\n  const botCards = bots.map((bot) => (\n    <BotCard className=\"bot-card\"\n      key={bot.id}\n      bot={bot}\n      botFunction={handleBotClick}\n      dischargeBot={dischargeBot}\n    />\n  ));\n\n  return (\n    <>\n      <h1 style={{ textAlign: \"center\" }}>Collection of all bots</h1>\n      <div className=\"ui four column grid\">\n        <div className=\"row\">{botCards}</div>\n      </div>\n    </>\n  );\n}\n\nexport default BotCollection;\n"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,QAAQ,MAAM,YAAY;AACjC;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEA,SAASC,aAAaA,CAAC;EAAEC,IAAI;EAAEC,QAAQ;EAAEC;AAAa,CAAC,EAAE;EAAAC,EAAA;EACvD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;;EAEpD;EACA,MAAMc,cAAc,GAAIC,GAAG,IAAK;IAC9BF,cAAc,CAACE,GAAG,CAAC;EACrB,CAAC;EAED,IAAIH,WAAW,EAAE;IACf,oBACER,OAAA,CAACF,QAAQ;MACPa,GAAG,EAAEH,WAAY;MACjBI,SAAS,EAAEP,QAAS;MACpBQ,YAAY,EAAEC;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC;EAEN;EAEA,SAASJ,YAAYA,CAAA,EAAG;IACtBL,cAAc,CAAC,IAAI,CAAC;EACtB;EAEA,MAAMU,QAAQ,GAAGf,IAAI,CAACgB,GAAG,CAAET,GAAG,iBAC5BX,OAAA,CAACH,OAAO;IAACwB,SAAS,EAAC,UAAU;IAE3BV,GAAG,EAAEA,GAAI;IACTW,WAAW,EAAEZ,cAAe;IAC5BJ,YAAY,EAAEA;EAAa,GAHtBK,GAAG,CAACY,EAAE;IAAAR,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAIZ,CACF,CAAC;EAEF,oBACElB,OAAA,CAAAE,SAAA;IAAAsB,QAAA,gBACExB,OAAA;MAAIyB,KAAK,EAAE;QAAEC,SAAS,EAAE;MAAS,CAAE;MAAAF,QAAA,EAAC;IAAsB;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC/DlB,OAAA;MAAKqB,SAAS,EAAC,qBAAqB;MAAAG,QAAA,eAClCxB,OAAA;QAAKqB,SAAS,EAAC,KAAK;QAAAG,QAAA,EAAEL;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC;EAAA,eACN,CAAC;AAEP;AAACX,EAAA,CAvCQJ,aAAa;AAAAwB,EAAA,GAAbxB,aAAa;AAyCtB,eAAeA,aAAa;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}